{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://audioviz/./node_modules/fscreen/dist/fscreen.esm.js","webpack://audioviz/./src/audio.ts","webpack://audioviz/./src/utils.ts","webpack://audioviz/./src/canvas.ts","webpack://audioviz/./src/main.ts","webpack://audioviz/./src/loader.ts"],"sourcesContent":["var key = {\r\n    fullscreenEnabled: 0,\r\n    fullscreenElement: 1,\r\n    requestFullscreen: 2,\r\n    exitFullscreen: 3,\r\n    fullscreenchange: 4,\r\n    fullscreenerror: 5,\r\n    fullscreen: 6\r\n};\r\nvar webkit = [\r\n    'webkitFullscreenEnabled',\r\n    'webkitFullscreenElement',\r\n    'webkitRequestFullscreen',\r\n    'webkitExitFullscreen',\r\n    'webkitfullscreenchange',\r\n    'webkitfullscreenerror',\r\n    '-webkit-full-screen',\r\n];\r\nvar moz = [\r\n    'mozFullScreenEnabled',\r\n    'mozFullScreenElement',\r\n    'mozRequestFullScreen',\r\n    'mozCancelFullScreen',\r\n    'mozfullscreenchange',\r\n    'mozfullscreenerror',\r\n    '-moz-full-screen',\r\n];\r\nvar ms = [\r\n    'msFullscreenEnabled',\r\n    'msFullscreenElement',\r\n    'msRequestFullscreen',\r\n    'msExitFullscreen',\r\n    'MSFullscreenChange',\r\n    'MSFullscreenError',\r\n    '-ms-fullscreen',\r\n];\r\n// so it doesn't throw if no window or document\r\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\r\nvar vendor = (('fullscreenEnabled' in document && Object.keys(key)) ||\r\n    (webkit[0] in document && webkit) ||\r\n    (moz[0] in document && moz) ||\r\n    (ms[0] in document && ms) ||\r\n    []);\r\nvar fscreen = {\r\n    requestFullscreen: function (element) { return element[vendor[key.requestFullscreen]](); },\r\n    requestFullscreenFunction: function (element) { return element[vendor[key.requestFullscreen]]; },\r\n    get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\r\n    get fullscreenPseudoClass() { return \":\" + vendor[key.fullscreen]; },\r\n    addEventListener: function (type, handler, options) { return document.addEventListener(vendor[key[type]], handler, options); },\r\n    removeEventListener: function (type, handler, options) { return document.removeEventListener(vendor[key[type]], handler, options); },\r\n    get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\r\n    set fullscreenEnabled(val) { },\r\n    get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\r\n    set fullscreenElement(val) { },\r\n    get onfullscreenchange() { return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()]; },\r\n    set onfullscreenchange(handler) { return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler; },\r\n    get onfullscreenerror() { return document[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()]; },\r\n    set onfullscreenerror(handler) { return document[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()] = handler; },\r\n};\n\nexport default fscreen;\n//# sourceMappingURL=fscreen.esm.js.map\n","enum DEFAULTS{\n  gain = .5,\n  numSamples = 256\n}\n\n// our WebAudio context\nconst audioCtx = new AudioContext();\n\n// WebAudio nodes that are part of our WebAudio audio routing graph\n// create an off-screen <audio> element\nconst element =  new Audio();\n// create a source node that points at the <audio> element\nconst sourceNode = audioCtx.createMediaElementSource(element);\n// create an analyser node\nconst analyserNode = audioCtx.createAnalyser();\n// create a gain (volume) node\nconst gainNode = audioCtx.createGain();\n// create a new array of 8-bit integers (0-255)\n// this is a typed array to hold the audio frequency data\n//const audioData = new Uint8Array(DEFAULTS.numSamples / 2);\n\n// Getters\nexport const getAnalyserNode = () => analyserNode;\nexport const getAudioCtx = () => audioCtx;\n\n// Public\nexport const loadSoundFile = (filePath:string) => {\n  element.src = filePath;\n};\n\nexport const playCurrentSound = () => {\n  element.play();\n};\n\nexport const pauseCurrentSound = () => {\n  element.pause();\n};\n\nexport const setVolume = (value:number) => {\n  gainNode.gain.value = value;\n};\n\nexport const setupWebaudio = (filePath:string) => {\n  /*\n  We will request DEFAULTS.numSamples number of samples or \"bins\" spaced \n  equally across the sound spectrum.\n\n  If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, \n  the second is 172 Hz, the third is 344Hz, and so on. \n  Each bin contains a number between 0-255 representing \n  the amplitude of that frequency.\n  */ \n  // fft stands for Fast Fourier Transform\n  analyserNode.fftSize = DEFAULTS.numSamples;\n\n  // connect the nodes - we now have an audio graph\n  sourceNode.connect(analyserNode);\n  analyserNode.connect(gainNode);\n  gainNode.connect(audioCtx.destination);\n\n  // set initial volume\n  setVolume(DEFAULTS.gain);\n\n  // have <audio> point at a sound file\n  loadSoundFile(filePath);\n};\n","export interface ColorStop{\n  percent: number,\n  color: string\n}\n\nexport const makeColor = (red:number, green:number, blue:number, alpha = 1) => {\n  return `rgba(${red},${green},${blue},${alpha})`;\n};\n\nexport const getRandom = (min:number, max:number) => {\n  return Math.random() * (max - min) + min;\n};\n\nexport const getRandomColor = () => {\n  const floor = 35; // so that colors are not too bright or too dark \n  const getByte = () => getRandom(floor, 255 - floor);\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\n};\n\nexport const getLinearGradient = (\n  ctx:CanvasRenderingContext2D,\n  startX:number,\n  startY:number,\n  endX:number,\n  endY:number,\n  colorStops: ColorStop[]\n) => {\n  const lg = ctx.createLinearGradient(startX,startY,endX,endY);\n  for (const stop of colorStops) {\n    lg.addColorStop(stop.percent,stop.color);\n  }\n  return lg;\n};\n","/*\n  The purpose of this file:\n    - takes in the analyser node and a <canvas> element: \n    - the module will create a drawing context that points at the <canvas> \n    - it will store the reference to the analyser node\n    - in draw(), it will loop through the data in the analyser node\n    - and then draw something representative on the canvas\n    - maybe a better name for this file/module would be *visualizer.js* ?\n*/\n\nimport * as utils from \"./utils\";\n\nexport interface DrawParams{\n  showGradient: boolean,\n  showBars: boolean,\n  showCircles: boolean,\n  showNoise: boolean,\n  showInvert: boolean,\n  showEmboss: boolean\n}\n\nlet ctx:CanvasRenderingContext2D,\n  canvasWidth:number,\n  canvasHeight:number,\n  gradient:CanvasGradient,\n  analyserNode:AnalyserNode,\n  audioData:Uint8Array;\n\nexport const setupCanvas = (canvas:HTMLCanvasElement, node:AnalyserNode) => {\n  // create drawing context\n  ctx = canvas.getContext(\"2d\");\n  canvasWidth = canvas.width;\n  canvasHeight = canvas.height;\n  // create a gradient that runs top to bottom\n  const colorStops:utils.ColorStop[] = [\n    { percent:0, color:\"blue\" },\n    { percent:.25, color:\"green\" },\n    { percent:.5, color:\"yellow\" },\n    { percent:.75, color:\"red\" },\n    { percent:1, color:\"magenta\" },\n  ];\n  \n  gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, colorStops);\n  // keep a reference to the analyser node\n  analyserNode = node;\n  // this is the array where the analyser data will be stored\n  audioData = new Uint8Array(analyserNode.fftSize / 2);\n};\n\nexport const draw = (params: DrawParams) => {\n  // Populate the audioData array with the frequency data from the analyserNode\n  // notice these arrays are passed \"by reference\" \n  analyserNode.getByteFrequencyData(audioData);\n  // OR\n  //analyserNode.getByteTimeDomainData(audioData); // waveform data\n  \n  // 2 - draw background\n  ctx.save();\n  ctx.fillStyle = \"black\";\n  ctx.globalAlpha = 0.1;\n  ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n  ctx.restore();\n  \n  // 3 - draw gradient\n  if (params.showGradient) {\n    ctx.save();\n    ctx.fillStyle = gradient;\n    ctx.globalAlpha = .3;\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n    ctx.restore();\n  }\n  \n  // 4 - draw bars\n  if (params.showBars) {\n    const barSpacing = 4;\n    const margin = 5;\n    const totalBarSpacing = audioData.length * barSpacing;\n    const screenWidthForBars = canvasWidth - totalBarSpacing - margin * 2;\n    const barWidth = screenWidthForBars / audioData.length;\n    const barHeight = 200;\n    const topSpacing = 100;\n\n    ctx.save();\n    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n    ctx.strokeStyle = \"rgba(0,0,0,0.5)\"; \n    // loop through the data and draw!\n    for (let i = 0; i < audioData.length; i += 1) { // eslint-disable-line id-length,max-len\n      ctx.fillRect(\n        margin + i * (barWidth + barSpacing), \n        topSpacing + 256 - audioData[i], \n        barWidth, \n        barHeight\n      );\n      ctx.strokeRect(\n        margin + i * (barWidth + barSpacing),\n        topSpacing + 256 - audioData[i], \n        barWidth, \n        barHeight\n      );\n      \n    }\n    ctx.restore();\n  }\n  \n  // 5 - draw circles\n  if (params.showCircles) {\n    const maxRadius = canvasHeight / 4;\n    ctx.save();\n    ctx.globalAlpha = 0.5;\n    for (let i = 0; i < audioData.length; i += 1) { // eslint-disable-line id-length,max-len\n      const percent = audioData[i] / 255;\n      const circleRadius = percent * maxRadius;\n     \n      // red-ish circles\n      ctx.beginPath();\n      ctx.fillStyle = utils.makeColor(255, 111, 111, .34 - percent / 3);\n      ctx.arc(canvasWidth / 2 , canvasHeight / 2, circleRadius, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      \n      // blue-ish circles, bigger, more transparent\n      ctx.beginPath();\n      ctx.fillStyle = utils.makeColor(0, 0, 255, .1 - percent / 10);\n      ctx.arc(canvasWidth / 2 , canvasHeight / 2, circleRadius * 1.5, 0, 2 * Math.PI); // eslint-disable-line max-len\n      ctx.fill();\n      ctx.closePath();\n\n      // yellow-ish circles, smaller\n      ctx.beginPath();\n      ctx.fillStyle = utils.makeColor(200, 200, 0, .5 - percent / 5);\n      ctx.arc(canvasWidth / 2 , canvasHeight / 2, circleRadius * .5, 0, 2 * Math.PI); // eslint-disable-line max-len\n      ctx.fill();\n      ctx.closePath();\n    }\n    ctx.restore();\n  }\n\n  // 6 - bitmap manipulation\n  // TODO: right now. we are looping though every pixel of the canvas \n  // (320,000 of them!), regardless of whether or not we are applying \n  // a pixel effect At some point, refactor this code so that we are \n  // looping though the image data only if it is necessary\n\n  // A) grab all of the pixels on the canvas and put them in the `data` array\n  // `imageData.data` is a `Uint8ClampedArray()` typed array that has \n  // 1.28 million elements!\n  // the variable `data` below is a reference to that array \n  const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n  const data = imageData.data;\n  const length = data.length;\n  const width = imageData.width;\n\t\n  // B) Iterate through each pixel, stepping 4 elements at a time \n  // (which is the RGBA for 1 pixel)\n  for (let i = 0; i < length; i += 4) { // eslint-disable-line id-length,max-len\n    if (params.showNoise && Math.random() < .05) {\n      // C) randomly change every 20th pixel to red\n      // data[i] is the red channel\n      // data[i+1] is the green channel\n      // data[i+2] is the blue channel\n      // data[i+3] is the alpha channel\n      // zero out the red and green and blue channels\n      // make the red channel 100% red\n      data[i] = data[i + 1] = data[i + 2] = 0;\n      data[i] = 255;\n    }\n\n    if (params.showInvert) {\n      const red = data[i], green = data[i + 1], blue = data[i + 2];\n      data[i] = 255 - red;\n      data[i + 1] = 255 - green;\n      data[i + 2] = 255 - blue;\n    }\n  }\n\n  if(params.showEmboss) {\n    for (let i = 0; i < length; i += 1) { // eslint-disable-line id-length,max-len\n      if(i % 4 === 3) continue;\n      data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\n    }\n  }\n\n  // Copy image data back to canvas\n  ctx.putImageData(imageData, 0, 0);\n};\n","/*\n  main.js is primarily responsible for hooking up the UI to the rest of the \n  application and setting up the main event loop\n*/\n\n//import * as utils from './utils';\nimport fscreen from \"fscreen\";\nimport * as audio from \"./audio\";\nimport * as canvas from \"./canvas\";\n\nenum DEFAULTS{\n  sound1 = \"media/New Adventure Theme.mp3\"\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state\nenum AUDIO_CONTEXT_STATE{\n  suspended = \"suspended\",\n  running = \"running\", // not using\n  closed = \"closed\" // not using\n}\n\nenum BUTTON_PLAYING_STATE{\n  yes = \"yes\",\n  no = \"no\"\n}\n\nconst drawParams:canvas.DrawParams = {\n  showGradient: true,\n  showBars: true,\n  showCircles: true,\n  showNoise: false,\n  showInvert: false,\n  showEmboss: false\n};\n\nconst setupUI = (canvasElement:HTMLCanvasElement) => {\n  /* Enable Controls */\n\n  // Fullscreen button\n  // https://www.jsdelivr.com/package/npm/fscreen\n  // https://www.npmjs.com/package/@types/fscreen\n  const btnFS:HTMLButtonElement = document.querySelector(\"#btn-fs\");\n  if (fscreen.fullscreenEnabled) {\n    console.log(\"Fullscreen API enabled\"); // eslint-disable-line no-console\n    btnFS.onclick = () => {\n      fscreen.requestFullscreen(canvasElement);\n    };\n  } else {\n    console.log(\"Fullscreen API NOT enabled\"); // eslint-disable-line no-console\n    btnFS.disabled = true;\n  }\n\n  // Play/Pause button\n  const btnPlay:HTMLButtonElement = document.querySelector(\"#btn-play\");\n  btnPlay.onclick = () => {\n    const audioCtx = audio.getAudioCtx();\n    // check if context is in suspended state (autoplay policy)\n    if (audioCtx.state === AUDIO_CONTEXT_STATE.suspended) {\n      audioCtx.resume();\n    }\n    if (btnPlay.dataset.playing === BUTTON_PLAYING_STATE.no) {\n      // if track is currently paused, play it\n      audio.playCurrentSound();\n      // our CSS will set the text to \"Pause\"\n      btnPlay.dataset.playing = BUTTON_PLAYING_STATE.yes;\n    } else {\n      // if track IS playing, pause it\n      audio.pauseCurrentSound();\n      // our CSS will set the text to \"Play\"\n      btnPlay.dataset.playing = BUTTON_PLAYING_STATE.no;\n    }\n  };\n\n  // Volume Slider & Label\n  const sliderVolume:HTMLInputElement = document.querySelector(\"#slider-volume\"); // eslint-disable-line max-len\n  const lblVolume:HTMLLabelElement = document.querySelector(\"#lbl-volume\");\n\n  sliderVolume.oninput = () => {\n    const value = +sliderVolume.value;\n    audio.setVolume(value);\n    lblVolume.textContent = String(Math.round(+value / 2 * 100));\n  };\n  sliderVolume.dispatchEvent(new Event(\"input\"));\n\n  // Audio Track Chooser\n  const selectTrack:HTMLSelectElement = document.querySelector(\"#select-track\"); // eslint-disable-line max-len\n  selectTrack.onchange = () => {\n    audio.loadSoundFile(selectTrack.value);\n    // pause the current track if it is playing\n    if (btnPlay.dataset.playing === BUTTON_PLAYING_STATE.yes) {\n      btnPlay.dispatchEvent(new MouseEvent(\"click\"));\n    }\n  };\n\n  // Checkboxes\n  const cbGradient:HTMLInputElement = document.querySelector(\"#cb-gradient\");\n  cbGradient.onchange = () =>  drawParams.showGradient = !!cbGradient.checked;\n\n  const cbBars:HTMLInputElement = document.querySelector(\"#cb-bars\");\n  cbBars.onchange = () => drawParams.showBars = !!cbBars.checked;\n\n  const cbCircles:HTMLInputElement = document.querySelector(\"#cb-circles\");\n  cbCircles.onchange = () => drawParams.showCircles = !!cbCircles.checked;\n\n  const cbNoise:HTMLInputElement = document.querySelector(\"#cb-noise\");\n  cbNoise.onchange = () => drawParams.showNoise = !!cbNoise.checked;\n\n  const cbInvert:HTMLInputElement = document.querySelector(\"#cb-invert\");\n  cbInvert.onchange = () => drawParams.showInvert = !!cbInvert.checked;\n\n  const cbEmboss:HTMLInputElement = document.querySelector(\"#cb-emboss\");\n  cbEmboss.onchange = () => drawParams.showEmboss = !!cbEmboss.checked;\n};\n\nconst loop = () => {\n  setTimeout(loop, 1000 / 60);\n  canvas.draw(drawParams);\n};\n\nexport const init = () => {\n  audio.setupWebaudio(DEFAULTS.sound1);\n  const canvasElement:HTMLCanvasElement = document.querySelector(\"canvas\");\n  setupUI(canvasElement);\n  canvas.setupCanvas(canvasElement, audio.getAnalyserNode());\n  loop();\n};\n","import * as main from \"./main\";\n\nwindow.onload = () => {\n  main.init();\n};\n"],"names":["key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","fullscreen","webkit","moz","ms","window","document","vendor","Object","keys","element","requestFullscreenFunction","bind","fullscreenPseudoClass","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror","DEFAULTS","audioCtx","AudioContext","Audio","sourceNode","createMediaElementSource","analyserNode","createAnalyser","gainNode","createGain","getAudioCtx","loadSoundFile","filePath","src","setVolume","value","gain","makeColor","red","green","blue","alpha","ctx","canvasWidth","canvasHeight","gradient","audioData","AUDIO_CONTEXT_STATE","BUTTON_PLAYING_STATE","drawParams","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","loop","setTimeout","params","getByteFrequencyData","save","fillStyle","globalAlpha","fillRect","restore","barSpacing","margin","totalBarSpacing","length","barWidth","barHeight","topSpacing","strokeStyle","i","strokeRect","maxRadius","percent","circleRadius","beginPath","arc","Math","PI","fill","closePath","imageData","getImageData","data","width","random","putImageData","init","sound1","fftSize","numSamples","connect","destination","canvasElement","querySelector","canvas","node","btnFS","console","log","onclick","disabled","btnPlay","state","suspended","resume","dataset","playing","no","play","yes","pause","sliderVolume","lblVolume","oninput","textContent","String","round","dispatchEvent","Event","selectTrack","onchange","MouseEvent","cbGradient","checked","cbBars","cbCircles","cbNoise","cbInvert","cbEmboss","setupUI","getContext","height","startX","startY","endX","endY","colorStops","lg","createLinearGradient","stop","color","addColorStop","Uint8Array","onload"],"sourceRoot":""}